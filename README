
This is version 4.0 of the BLT library.  It's an extension to the
Tcl/Tk toolkit.  You simply compile and link with the Tcl/Tk
libraries. It does not require the Tcl or Tk source files.

BLT is available from 

    www.sourceforge.net/projects/blt/files

This release has been built and tested with the following Tcl/Tk
versions:

        Tcl/Tk 8.0 thru 8.6

Tcl 7.6/Tk 4.2 isn't supported any more.  If you need Tcl 7.x, use the
2.4z release.

What is BLT? 

  BLT is an extension that adds new widgets and commands to Tcl/Tk.  It
  adds plotting widgets (X-Y graph, barchart, stripchart), a powerful
  geometry manager, a new canvas item, tree and table data objects.

  Plotting widgets:  

    blt::graph, blt::barchart, blt::stripchart
		BLT has X-Y graph, barchart, and stripchart widgets that are
		both easy to use and customize.  All the widgets work with
		BLT vector data objects, which makes it easy to manage data.
 
  Tree viewer
  
    blt::treeview 	Displays a general ordered tree which may be built 
		on-the-fly or all at once.

    blt::tree 	Tree data object.  
    blt::datatable
    blt::tableview
    
  Tab set:

    blt::tabset	Can be used either as a tab notebook or simple tabset.
		Multi-tiered and/or scrolled tabsets are available.
		Notebook pages can be torn-off into separate windows and 
		later put back. 
    
  Geometry Managers:  

    blt::table	A table-based geometry manager. Lets you specify widget
	      	layouts by row and column positions in the table. Unlike the
		packer or grid, you can finely control and constrain window
		sizes.

    blt::paneset
    blt::filmstrip
    blt::drawerset
    blt::scrollset

    blt::combobutton
    blt::comboeditor
    blt::comboentry
    blt::combomenu
    blt::combotree
    
  Vector Data Object:

    blt::vector	Lets you manage a vector of floating point values in a
		high-level fashion.  Vectors inter-operate seamlessly with 
		the plotting widgets. The graphs will automatically redraw 
		themselves when the vector data changes. Vector's components 
		can be managed through a Tcl array variable, a Tcl command, 
		or the using its own C API.

  Background Program Execution:

    blt::bgexec	Like Tcl's "exec ... &", but collects the output, error, and 
		status of the detached UNIX subprocesses.  Sets a Tcl variable 
		upon completion.  

  Busy Command:

    blt::busy	For preventing user-interactions when the application is
		busy.  Manages an invisible "busy" window which prevents
		further user interactions (keyboard, mouse, button, etc.).
		Also you can provide a busy cursor that temporarily 
		overrides those of the Tk widgets.

  New Canvas Item:

    eps		An new item is added to the Tk canvas for handling
		encapsulated PostScript.  It lets you embed an EPS file into
		the canvas displaying either an EPS preview image found in 
		the file, or a Tk image that you provide.  When you print 
		the canvas the EPS item will automatically include the EPS 
		file, translating and scaling the PostScript.  For example, 
		you could use "eps" items to tile several PostScript pages 
		into single page.

		The "eps" item can also be used as a replacement for "image"
		canvas items.  Unlike "image" canvas items, the image of an 
		eps item can be printed and scaled arbitrarily.

  Drag & Drop Facility:

    blt::drag&drop	Adds drag-n-drop capabilities to Tk.  It uses "send"-style 
		communication between drag-drop sources and targets.  The 
		result is a much more powerful drag-and-drop mechanism than 
		is available with OpenLook or Motif.  

  Bitmap Command:

    blt::bitmap	Lets you read and write bitmaps from Tcl.  You can define
		bitmaps from ordinary text strings.  Bitmaps can also be
		scaled and rotated.  For example, you can create a button
		with rotated text by defining a bitmap from a text string
		and rotating it.  You can then use the bitmap in the button
		widget.

  Miscellaneous Commands:

    blt::winop	Basic window operations. You can raise, lower, map, or, 
		unmap windows.  Other operations let you move the pointer
		or take photo image snapshots of Tk widgets.

    blt::debug	Lets you trace the execution of Tcl commands and procedures.
		Prints out each Tcl command before it's executed.  

    blt::watch	Lets you specify Tcl procedures to be run before and/or
		after every Tcl command.  May be used for logging, tracing, 
		profiling, or debugging or Tcl code.

    blt::spline	Computes a spline fitting a set of data points (x and y 
		vectors) and produces a vector of the interpolated images 
		(y-coordinates) at a given set of x-coordinates.

    blt::htext	A simple hypertext widget. Allows text and Tk widgets to
		be combined in a scroll-able text window.  Any Tk widget 
		can be embedded and used to form hyper-links.  Other 
		options allow for selections and text searches.

   
How to compile and test BLT?

  See the file "INSTALL" for instructions.


Does BLT work under Windows?

  Yes.  Windows 95/98/ME/NT/2000/XP.  I've compiled it with both
  MS VC++ 5.0/6.0p4 and EGCS 1.1.1.  Self-installing pre-compiled versions 
  are available.

What are the differences between the Windows and Unix releases?

  All commands work: graphs, bgexec, busy, drag&drop etc. except
  the "container", and "cutbuffer" widgets. 

  The "drag&drop" command still needs to use "send" to transfer
  information between Tk applications.  You can use 

	./demos/scripts/send.tcl 

  to imitate "send" using DDE.  Just source the script and execute
	
   	SendInit	
	SendVerify

  to set up the new send command.

When will...?

  In general, I can't answer the "When will" questions, mostly out of 
  embarrassment.  My estimates of when new features and releases will
  occur usually turn out to be way way off.  

What does BLT stand for?

  Whatever you want it to.

Where to send bugs reports, suggestions, etc. ?

	gahowlett@gmail.com

  Make sure you include BLT and the version number in the subject line.

--gah
